package ${package.Controller};


import com.baomidou.mybatisplus.core.metadata.IPage;
import com.hyit.common.base.result.BaseResult;
import com.hyit.common.core.base.constants.HttpStatus;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器 controller层
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@Api(tags = "")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
public class ${table.controllerName} {

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    /**
     * 查询所有接口
     * @return
     */
    @PostMapping("/list")
    @ApiOperation(value = "列表", notes = "列表")
    public BaseResult<IPage<${entity}Vo>> list(@RequestBody ${entity}Dto dto) {
        BaseResult<IPage<${entity}Vo>> baseResult = new BaseResult<>();
        IPage<${entity}Vo> list = ${table.entityPath}Service.list(dto);
        baseResult.setData(list);
        baseResult.setCode(HttpStatus.SUCCESS);
        baseResult.setMsg("查询成功");
        return baseResult;
    }
    /**
     * 根据id查询数据接口
     * @param id
     * @return
     */
    @ApiOperation(value = "根据id查询详细信息", notes = "根据id查询信息详情")
    @GetMapping("/getInfo/{id}")
    public BaseResult<${entity}Vo> getInfo(@PathVariable("id") Long id) {
        BaseResult<${entity}Vo> baseResult = new BaseResult<>();
        ${entity}Vo vo = ${table.entityPath}Service.getInfo(id);
        baseResult.setData(vo);
        baseResult.setCode(HttpStatus.SUCCESS);
        baseResult.setMsg("查询成功");
        return baseResult;
    }
    /**
     * 新增更新接口
     * @param dto
     * @return
     */
    @PostMapping("/saveOrUpdate")
    @ApiOperation(value = "保存", notes = "保存")
    public BaseResult<${entity}Dto> saveOrUpdate(@RequestBody ${entity}Dto dto) {
        BaseResult<${entity}Dto> baseResult = new BaseResult<>();
        boolean save = ${table.entityPath}Service.saveOrUpdate(dto);
        baseResult.setData(dto);
        baseResult.setCode(save ? HttpStatus.SUCCESS : HttpStatus.ERROR);
        baseResult.setMsg(save ? "保存成功" : "保存失败");
        return baseResult;
    }
    /**
     * 删除接口
     * @param id
     * @return
     */
    @ApiOperation(value = "根据id删除", notes = "根据id删除")
    @PostMapping("/removeById/{id}")
    public BaseResult<${entity}> removeById(@PathVariable("id") Long id) {
        BaseResult<${entity}> baseResult = new BaseResult<>();
        boolean remove = ${table.entityPath}Service.removeById((id));
        baseResult.setCode(remove ? HttpStatus.SUCCESS : HttpStatus.ERROR);
        baseResult.setMsg(remove ? "删除成功" : "删除失败");
        return baseResult;
    }
    /**
     * 批量删除接口
     * @param ids
     * @return
     */
    @PostMapping("/removeByIds")
    @ApiOperation(value = "根据ids批量删除", notes = "根据ids批量删除")
    public BaseResult<${entity}> deleteBatch(@RequestBody List<Long> ids) {
        BaseResult<${entity}> baseResult = new BaseResult<>();
        boolean remove = ${table.entityPath}Service.removeByIds((ids));
        baseResult.setCode(remove ? HttpStatus.SUCCESS : HttpStatus.ERROR);
        baseResult.setMsg(remove ? "删除成功" : "删除失败");
        return baseResult;
    }

}
